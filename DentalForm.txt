import { InputHTMLAttributes, TextareaHTMLAttributes, useState } from "react";
import {
  CreateDentalLabType,
  DENTAL_STATUS_SELECTIONS,
} from "../../../types/dentalLabTypes";
import style from "../Form.module.css";
import { store, useAppDispatch } from "../../../redux/store";
import { setCreateDentalLab } from "../../../redux/dentalLabSlice";
import { getInvalidMessage } from "../../../utils/getInvalidMessage";

interface DentalLabTextFieldProps
  extends InputHTMLAttributes<HTMLInputElement> {
  formKey: keyof CreateDentalLabType;
  labelname: string;
}

interface DentalLabTextAreaFieldProps
  extends TextareaHTMLAttributes<HTMLTextAreaElement> {
  formKey: keyof CreateDentalLabType;
  labelname: string;
}
interface DentalLabRadioFieldProps
  extends Omit<DentalLabTextFieldProps, "type"> {
  radioGroupSelections: Readonly<string[]> | string[];
  radioGroupTexts: string[];
}

function DentalLabInputText({
  formKey,
  labelname,
  required,
  type,
  ...rest
}: DentalLabTextFieldProps) {
  const value = store.getState().dentalLab.createData[formKey];
  const dispatch = useAppDispatch();
  const [invalidMessage, setInvalidMessage] = useState("");

  return (
    <label className={style["text-field"]}>
      <p>
        {required && <small>*</small>}
        {labelname}
      </p>
      <div className={style["input-wrapper"]}>
        <input
          defaultValue={value}
          onChange={(e) =>
            dispatch(
              setCreateDentalLab({
                [formKey]: type === "number" ? +e.target.value : e.target.value,
              })
            )
          }
          onInput={(e) => {
            if (invalidMessage === "") return;
            const element = e.target as HTMLInputElement;
            if (element.validity.valid) return setInvalidMessage("");
            setInvalidMessage(getInvalidMessage(element));
          }}
          onInvalid={(e) =>
            setInvalidMessage(getInvalidMessage(e.target as HTMLInputElement))
          }
          required={!!required}
          type={type}
          {...rest}
        />
        {invalidMessage.length > 0 && (
          <span className={style["invalid-message"]}>{invalidMessage}</span>
        )}
      </div>
    </label>
  );
}

function DentalLabInputTextArea({
  formKey,
  labelname,
  required,
  ...rest
}: DentalLabTextAreaFieldProps) {
  const value = store.getState().dentalLab.createData[formKey];
  const dispatch = useAppDispatch();
  const [invalidMessage, setInvalidMessage] = useState("");

  return (
    <label className={style["text-field"]}>
      <p>
        {required && <small>*</small>}
        {labelname}
      </p>
      <div className={style["input-wrapper"]}>
        <textarea
          defaultValue={value}
          onChange={(e) =>
            dispatch(setCreateDentalLab({ [formKey]: e.target.value }))
          }
          onInput={(e) => {
            if (invalidMessage === "") return;
            const element = e.target as HTMLInputElement;
            if (element.validity.valid) return setInvalidMessage("");
            setInvalidMessage(getInvalidMessage(element));
          }}
          onInvalid={(e) =>
            setInvalidMessage(getInvalidMessage(e.target as HTMLInputElement))
          }
          required={!!required}
          {...rest}
        />
        {invalidMessage.length > 0 && (
          <span className={style["invalid-message"]}>{invalidMessage}</span>
        )}
      </div>
    </label>
  );
}

function DentalLabRadioField({
  formKey,
  labelname,
  radioGroupTexts,
  radioGroupSelections,
  ...rest
}: DentalLabRadioFieldProps) {
  const value = store.getState().dentalLab.createData[formKey];
  const dispatch = useAppDispatch();

  return (
    <div className={style.radio}>
      <p>{labelname}</p>
      <div className={style["radio-group"]}>
        {radioGroupSelections.map((selection, idx) => (
          <label key={selection}>
            <input
              type="radio"
              name={formKey}
              defaultChecked={value === selection}
              onChange={() => {
                dispatch(setCreateDentalLab({ [formKey]: selection }));
              }}
              {...rest}
            />
            <span>{radioGroupTexts[idx]}</span>
          </label>
        ))}
      </div>
    </div>
  );
}

function DentalForm() {
  return (
    <div className={style.form}>
      <h1>牙技所資料設定</h1>
      <div className={style["form-body"]}>
        <div className={style["left-form"]}>
          <DentalLabInputText
            labelname="牙技所名稱"
            formKey="name"
            placeholder="e.g. XX牙技所"
            required
          />
          <DentalLabInputText
            labelname="牙技所聯絡人"
            formKey="contactPerson"
            placeholder="e.g. 王小明"
            required
          />
          <DentalLabInputText
            labelname="牙技所電話國碼"
            formKey="phoneCode"
            placeholder="e.g. 886(Taiwan)"
          />
          <DentalLabInputText
            labelname="牙技所電話"
            formKey="phoneNumber"
            placeholder="e.g. 02-1234-5678"
            required
          />
          <DentalLabInputText
            labelname="牙技所所在國家"
            formKey="country"
            required
          />
          <DentalLabInputText labelname="state" formKey="state" />
          <DentalLabInputText labelname="city" formKey="city" />
          <DentalLabInputTextArea
            labelname="牙技所地址"
            formKey="address"
            required
            rows={2}
          />
        </div>
        <div className={style["right-form"]}>
          <DentalLabRadioField
            labelname="牙技所狀態"
            formKey="status"
            radioGroupSelections={DENTAL_STATUS_SELECTIONS}
            radioGroupTexts={["聯繫中", "合約中", "已解約"]}
          />
          <DentalLabInputText
            labelname="牙技所統一編號"
            formKey="uniformNo"
            required
          />
          <DentalLabInputText
            labelname="牙技所email"
            formKey="email"
            type="email"
            placeholder="e.g. example@example.com"
            required
          />
          <DentalLabInputTextArea labelname="備註" formKey="remark" rows={5} />
          <DentalLabInputText
            labelname="abc"
            formKey="abc"
            type="number"
            required
          />
        </div>
      </div>
    </div>
  );
}

export default DentalForm;
